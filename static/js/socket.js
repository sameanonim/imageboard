// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const socket = io({
    reconnection: true,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    reconnectionAttempts: 5,
    timeout: 20000,
    autoConnect: true,
    transports: ['websocket', 'polling']
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket.on('connect', () => {
    console.log('Connected to server');
    showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Ç—Ä–µ–¥—É, –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–µ–¥–∞
    if (currentThreadId) {
        socket.emit('join_thread', { thread_id: currentThreadId });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
socket.on('disconnect', (reason) => {
    console.log('Disconnected from server:', reason);
    showNotification('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'error');
    
    // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (reason === 'io server disconnect') {
        socket.connect();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
socket.on('error', (data) => {
    console.error('Socket error:', data);
    showNotification(data.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket.on('connect_error', (error) => {
    console.error('Connection error:', error);
    showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket.on('reconnect', (attemptNumber) => {
    console.log('Reconnected after', attemptNumber, 'attempts');
    showNotification('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Ç—Ä–µ–¥—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (currentThreadId) {
        socket.emit('join_thread', { thread_id: currentThreadId });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket.on('reconnect_failed', () => {
    console.error('Failed to reconnect');
    showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
socket.on('new_post', (data) => {
    console.log('New post:', data);
    if (data.thread_id === currentThreadId) {
        appendPost(data);
    }
    showNotification(`–ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç ${data.user}`, 'info');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
socket.on('new_reply', (data) => {
    console.log('New reply:', data);
    if (data.thread_id === currentThreadId) {
        appendReply(data);
    }
    showNotification(`–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${data.user}`, 'info');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–¥–∞
socket.on('thread_locked', (data) => {
    console.log('Thread locked:', data);
    if (data.thread_id === currentThreadId) {
        updateThreadStatus('locked');
    }
    showNotification(
        `–¢—Ä–µ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${data.locked_by}`,
        'warning'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–¥–∞
socket.on('thread_unlocked', (data) => {
    console.log('Thread unlocked:', data);
    if (data.thread_id === currentThreadId) {
        updateThreadStatus('unlocked');
    }
    showNotification(
        `–¢—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${data.unlocked_by}`,
        'success'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
socket.on('post_deleted', (data) => {
    console.log('Post deleted:', data);
    if (data.thread_id === currentThreadId) {
        removePost(data.post_id);
    }
    showNotification('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º', 'warning');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
socket.on('achievement', (data) => {
    console.log('Achievement:', data);
    showAchievement(data);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.getElementById('notifications') ||
        createNotificationContainer();
    container.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateY(0)';
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-20px)';
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function createNotificationContainer() {
    const container = document.createElement('div');
    container.id = 'notifications';
    document.body.appendChild(container);
    return container;
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
function appendPost(data) {
    const post = createPostElement(data);
    const container = document.querySelector('.posts-container');
    container.appendChild(post);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        post.style.opacity = '1';
        post.style.transform = 'translateY(0)';
    });

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É –ø–æ—Å—Ç—É
    post.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
function appendReply(data) {
    const reply = createReplyElement(data);
    const parent = document.querySelector(`#post-${data.reply_to_id}`);
    if (parent) {
        const replies = parent.querySelector('.replies') ||
            createRepliesContainer(parent);
        replies.appendChild(reply);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            reply.style.opacity = '1';
            reply.style.transform = 'translateX(0)';
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
function createRepliesContainer(parent) {
    const container = document.createElement('div');
    container.className = 'replies';
    parent.appendChild(container);
    return container;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–¥–∞
function updateThreadStatus(status) {
    const thread = document.querySelector('.thread');
    if (thread) {
        thread.dataset.status = status;
        const statusElement = thread.querySelector('.thread-status');
        if (statusElement) {
            statusElement.textContent = status === 'locked' ? 'üîí' : 'üîì';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
function removePost(postId) {
    const post = document.querySelector(`#post-${postId}`);
    if (post) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        post.style.opacity = '0';
        post.style.transform = 'scale(0.8)';
        setTimeout(() => post.remove(), 300);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function showAchievement(data) {
    const achievement = document.createElement('div');
    achievement.className = 'achievement';
    achievement.innerHTML = `
        <div class="achievement-icon">${data.icon}</div>
        <div class="achievement-content">
            <div class="achievement-name">${data.name}</div>
            <div class="achievement-description">${data.description}</div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.getElementById('achievements') ||
        createAchievementContainer();
    container.appendChild(achievement);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        achievement.style.opacity = '1';
        achievement.style.transform = 'translateX(0)';
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        achievement.style.opacity = '0';
        achievement.style.transform = 'translateX(100%)';
        setTimeout(() => achievement.remove(), 300);
    }, 5000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function createAchievementContainer() {
    const container = document.createElement('div');
    container.id = 'achievements';
    document.body.appendChild(container);
    return container;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
function createPostElement(data) {
    const post = document.createElement('div');
    post.id = `post-${data.post_id}`;
    post.className = 'post';
    post.style.opacity = '0';
    post.style.transform = 'translateY(20px)';
    post.style.transition = 'opacity 0.3s, transform 0.3s';

    post.innerHTML = `
        <div class="post-header">
            <span class="post-user">${data.user}</span>
            <span class="post-time">${formatDate(data.created_at)}</span>
        </div>
        <div class="post-content">${data.content}</div>
    `;

    return post;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
function createReplyElement(data) {
    const reply = document.createElement('div');
    reply.id = `reply-${data.post_id}`;
    reply.className = 'reply';
    reply.style.opacity = '0';
    reply.style.transform = 'translateX(20px)';
    reply.style.transition = 'opacity 0.3s, transform 0.3s';

    reply.innerHTML = `
        <div class="reply-header">
            <span class="reply-user">${data.user}</span>
            <span class="reply-time">${formatDate(data.created_at)}</span>
        </div>
        <div class="reply-content">${data.content}</div>
    `;

    return reply;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –í—ã—Ö–æ–¥ –∏–∑ —Ç—Ä–µ–¥–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (currentThreadId) {
        socket.emit('leave_thread', { thread_id: currentThreadId });
    }
}); 